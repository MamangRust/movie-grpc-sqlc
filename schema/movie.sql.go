// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: movie.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, genre) VALUES ($1, $2) RETURNING id, title, genre, created_at, updated_at
`

type CreateMovieParams struct {
	Title string `json:"title"`
	Genre string `json:"genre"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (*Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Title, arg.Genre)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, genre, created_at, updated_at FROM movies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (*Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, title, genre, created_at, updated_at FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]*Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genre,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies SET title=$2, genre=$3 WHERE id=$1 RETURNING id, title, genre, created_at, updated_at
`

type UpdateMovieParams struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	Genre string `json:"genre"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (*Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie, arg.ID, arg.Title, arg.Genre)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
